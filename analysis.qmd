---
title: Analysis
description: Here we provide a detailed analysis using more sophisticated statistics techniques.
toc: true
draft: false
---

![](https://upload.wikimedia.org/wikipedia/commons/7/77/Pebbleswithquarzite.jpg)
## Loading Clean Data

```{r}
library(here)
# Set the path to the RDS file
cleaned_dataset_path_rds <- here("dataset", "cleaned_NYSERDA_LMI_Census_2013-2015.rds")

# Load the dataset from the RDS file
clean_data <- readRDS(cleaned_dataset_path_rds)

head(clean_data)
```

## Analysis

```{r}
library(ggplot2)
library(reshape2)

# Creating a cross-tabulation of Race / Ethnicity and Education Level
ct <- table(clean_data$`Race_Ethnicity`, clean_data$`Education_Level`)

# Melting the table for ggplot
ct_melted <- melt(ct)

# Plotting with counts in each box
ggplot(ct_melted, aes(x = Var2, y = Var1, fill = value)) +
  geom_tile() +  
  geom_text(aes(label = value), color = "white", size = 4) +  # Showing the count
  scale_fill_gradient(low = "lightblue", high = "blue") +
  labs(x = "Education Level", y = "Race / Ethnicity", fill = "Count",
       title = "Heatmap of Education Level by Race / Ethnicity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
```{r}
# Same as before but with percentages of each education level
ct_percent <- prop.table(ct, 2) * 100
ct_percent_melted <- melt(ct_percent)

# Plotting with percentage in each box
ggplot(ct_percent_melted, aes(x = Var2, y = Var1, fill = value)) +
  geom_tile() +  
  geom_text(aes(label = sprintf("%.1f%%", value)), color = "white", size = 4) +  # showing percentage
  scale_fill_gradient(low = "lightblue", high = "blue") +  
  labs(x = "Education Level", y = "Race / Ethnicity", fill = "Percentage",
       title = "Heatmap of Education Level by Race / Ethnicity (Percentage)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
library(dplyr)
library(forcats)

clean_data$`Income Numeric` <- case_when(
  clean_data$`Income_Groups` == "$0 to <$10,000" ~ 5,
  clean_data$`Income_Groups` == "$10,000-<$20,000" ~ 15,
  clean_data$`Income_Groups` == "$20,000-<$30,000" ~ 25,
  clean_data$`Income_Groups` == "$30,000-<$40,000" ~ 35,
  clean_data$`Income_Groups` == "$40,000-<$50,000" ~ 45,
  clean_data$`Income_Groups` == "$50,000+" ~ 55,
  TRUE ~ NA_real_
)

ggplot(clean_data, aes(x = fct_reorder(`Education_Level`, `Income Numeric`, .fun=mean), y = `Income Numeric`, fill = `Race_Ethnicity`)) +
  geom_bar(stat = "summary", fun = "mean", position = position_dodge()) +
  theme_minimal() +
  labs(x = "Education Level", y = "Average Income", fill = "Race / Ethnicity", title = "Average Income by Education Level and Race / Ethnicity") +
  theme(axis.text.x = element_text(angle = 55, hjust = 1),
        legend.position = "top",
        panel.grid.major.y = element_line(color = "black", size = 0.5),
        panel.grid.minor.y = element_line(color = "black", size = 0.5)) +
  scale_fill_brewer(palette = "Set3")


```


----------------------------------------------------------------------------------------
## New Analysis

# Libraries

```{r}
library(ggplot2)
library(dplyr)
library(readr)
library(here)
library(caret)
library(tidyverse)  # For data manipulation
library(modelr)     # For weighted regression

```

```{r}
# Load the dataset
clean_data <- readRDS(here("dataset", "cleaned_NYSERDA_LMI_Census_2013-2015.rds"))
```

1. Analyzing income distribution by race/ethnicity

```{r}
# Option 1

# Calculating weighted proportions
grouped_data <- clean_data %>%
  group_by(Race = `Race_Ethnicity`, Income = `Income_Groups`) %>%
  summarise(Weighted_Count = sum(`Household_Weight`), .groups = 'drop')

total_weights_per_race <- grouped_data %>%
  group_by(Race) %>%
  summarise(Total_Weight = sum(Weighted_Count), .groups = 'drop')

grouped_data <- grouped_data %>%
  left_join(total_weights_per_race, by = "Race") %>%
  mutate(Proportion = Weighted_Count / Total_Weight)

# stacked bar plot
ggplot(grouped_data, aes(x = Race, y = Proportion, fill = Income)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Weighted Distribution of Income Groups by Race/Ethnicity",
       x = "Race / Ethnicity",
       y = "Proportion") +
  scale_fill_brewer(palette = "Paired")

```
```{r}
# Option 2

# Calculating weighted proportions
plot_data <- clean_data %>%
  group_by(`Race_Ethnicity`, `Income_Groups`) %>%
  summarise(Weighted_Count = sum(`Household_Weight`), .groups = 'drop') %>%
  group_by(`Race_Ethnicity`) %>%
  mutate(Total_Weight = sum(Weighted_Count)) %>%
  mutate(Proportion = Weighted_Count / Total_Weight)

# Creating weighted histograms
ggplot(plot_data, aes(x = `Income_Groups`, y = Proportion, fill = `Income_Groups`)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~`Race_Ethnicity`, scales = "free_x") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(title = "Income Distribution by Race/Ethnicity",
       x = "Income Groups",
       y = "Weighted Proportion") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

2. Analyzing Housing Characteristics by Race/Ethnicity:

```{r}
weighted_counts <- clean_data %>%
  group_by(`Race_Ethnicity`, `Owner_Renter_Status`) %>%
  summarise(Weighted.Count = sum(`Household_Weight`), .groups = 'drop')

# Plot
ggplot(weighted_counts, aes(x=`Race_Ethnicity`, y=Weighted.Count, fill=`Owner_Renter_Status`)) +
  geom_bar(stat="identity", position=position_dodge()) +
  labs(title="Weighted Housing Status Distribution by Race / Ethnicity",
       x="Race / Ethnicity", y="Weighted Count") +
  scale_y_continuous(labels = scales::comma) +
  scale_fill_brewer(palette="Set1") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
3. Analyzing Impact of Race/Ethnicity on Educational Outcomes:

```{r}
weighted_education_counts <- clean_data %>%
  group_by(`Race_Ethnicity`, `Education_Level`) %>%
  summarise(Weighted.Count = sum(`Household_Weight`), .groups = 'drop')

# Plot
ggplot(weighted_education_counts, aes(x=`Race_Ethnicity`, y=Weighted.Count, fill=`Education_Level`)) +
  geom_bar(stat="identity", position=position_dodge()) +
  labs(title="Weighted Education Level Distribution by Race / Ethnicity",
       x="Race / Ethnicity", y="Weighted Count") +
  scale_y_continuous(labels = scales::comma) +  
  scale_fill_viridis_d() +  
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.position="right")
```

4. Geographical Map

```{r}
library(sf)
ny_counties <- st_read("dataset-ignore/tl_2023_us_county.shp")
demographic_data <- clean_data  

ny_counties <- ny_counties[ny_counties$STATEFP == '36', ]

#head(ny_counties)
```


```{r}
#install.packages("modeest")
library(modeest)

# Loading geographic data
ny_counties_sf <- st_as_sf(ny_counties)

# Definitions for mapping income to numeric values
income_levels <- c("$0 to <$10,000" = 5000,
                   "$10,000-<$20,000" = 15000,
                   "$20,000-<$30,000" = 25000,
                   "$30,000-<$40,000" = 35000,
                   "$40,000-<$50,000" = 45000,
                   "$50,000+" = 75000)

# Adding a numeric income column to the demographic data
demographic_data <- demographic_data %>%
  mutate(Income_Numeric = income_levels[as.character(Income_Groups)])

#Adding the average wage from the combined dataset 
dataset_to_combine <- read.csv("combining-dataset/Quarterly_Census_of_Employment_and_Wages_Annual_Data__Beginning_2000_20240415.csv", stringsAsFactors = FALSE) |>
    mutate_if(is.character, str_trim) # Trim leading and trailing whitespace from all character columns

county_avg_wage <- 
  filter(dataset_to_combine, Area.Type == "County") |>
  group_by(Area) |>
  summarise(Total_Wages = sum(`Total.Wage`, na.rm = TRUE),
            Total_Employment = sum(`Average.Employment`, na.rm = TRUE)) |>
  mutate(Average_Wage = Total_Wages / Total_Employment) |>
  rename(County = Area) |>
  mutate(County = str_replace_all(County, fixed(" County"), "")) |>
  select(-c(Total_Wages, Total_Employment))

#make a table with racial proportion for each race in each county 
race_proportion <- demographic_data |>
  group_by(Race_Ethnicity, County) |>
  summarise(count=n(), .groups = 'drop') |>
  group_by(County) |>
  mutate(total = sum(count)) |>
  ungroup() |>
  mutate(proportion = count / total) %>%
  select(-count, -total) %>%
  pivot_wider(names_from = Race_Ethnicity, values_from = proportion)

# Aggregating demographic data to find least common race, average income, and most common education level
demographic_data_aggregated <- demographic_data %>%
  group_by(County) %>%
  summarise(
    Least_Common_Race_Ethnicity = names(sort(table(Race_Ethnicity), decreasing = FALSE))[1],
    Most_Common_Education_Level = names(sort(table(Education_Level), decreasing = TRUE))[1],
    Average_Income = weighted.mean(Income_Numeric, Household_Weight, na.rm = TRUE),
    .groups = 'drop'
  )|>
  left_join(county_avg_wage, by = "County") |>
  left_join(race_proportion, by = "County")

# Merging
merged_data <- ny_counties_sf %>%
  left_join(demographic_data_aggregated, by = c("NAME" = "County"))
```

5. Static Maps 

```{r}
library(scales) 

# Color palettes for the maps
colors <- scale_fill_brewer(palette = "Pastel1", na.value = "grey50", guide = "legend")
income_colors <- scale_fill_viridis_c(
  name = "Average Income",
  labels = dollar_format(prefix="$"),
  na.value = "grey50"
)
education_colors <- scale_fill_brewer(palette = "Set3", guide = "legend")
race_color <- scale_fill_gradient(low = "lightgreen", high = "darkgreen", 
                      na.value = "grey50", name = "Proportion")

# Plotting map for Least Common Race/Ethnicity by County
race_map <- ggplot(data = merged_data) +
  geom_sf(aes(fill = Least_Common_Race_Ethnicity), color = "black", size = 0.25) +
  colors +
  labs(
    title = "Least Common Race/Ethnicity by County",
    fill = "Race/Ethnicity"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

# Plotting map for the proportion of Black population by County 
black_map <- ggplot(data = merged_data) +
  geom_sf(aes(fill = `Black, non-Hispanic`), color = "black", size = 0.25) +
  race_color +
  labs(
    title = "Proportion of Black/AA Population by County in New York",
    fill = "Black/AA Population"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom",
        legend.text = element_text(angle = 45, hjust = 1),
        legend.key.size = unit(1.5, "lines")) 

# Plotting map for the proportion of White population by County
# there could be a similar map

#Plotting map for Average wage (from combined dataset) by County
wage_map <- ggplot(data = merged_data) +
  geom_sf(aes(fill = Average_Wage), color = "black", size = 0.25) +
  income_colors +
  labs(
    title = "Average Wage by County in New York",
    fill = "Average Wage"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom",
        legend.text = element_text(angle = 45, hjust = 1),
        legend.key.size = unit(1.5, "lines")) 

# Plotting map for Average Income by County
income_map <- ggplot(data = merged_data) +
  geom_sf(aes(fill = Average_Income), color = "black", size = 0.25) +
  income_colors +
  labs(
    title = "Average Income by County in New York",
    fill = "Average Income"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom",
        legend.text = element_text(angle = 45, hjust = 1),
        legend.key.size = unit(1.5, "lines")) 

# Plotting map for Most Common Education Level by County
education_map <- ggplot(data = merged_data) +
  geom_sf(aes(fill = Most_Common_Education_Level), color = "black", size = 0.25) +
  scale_fill_brewer(palette = "Set3", guide = guide_legend(title = "Education Level", title.position = "top", title.hjust = 0.5, label.hjust = .5)) +
  labs(
    title = "Most Common Education Level by County",
    fill = "Education Level"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 8), 
    legend.title = element_text(size = 10), 
    legend.key.size = unit(1, "lines"), 
    legend.text.align = 0, 
    legend.box = "vertical" 
  )

# Print the maps
print(race_map)
print(income_map)
print(education_map)
print(wage_map)
print(black_map)
```


6. Interactive Version


```{r}
# install.packages("leaflet")
library(RColorBrewer)
library(leaflet)

palette <- brewer.pal(9, "Pastel1")
palette[length(palette)] <- "#8FBC8F"  

# Creating color factors for each category
race_colors <- colorFactor(palette, domain = merged_data$Least_Common_Race_Ethnicity, na.color = "grey50")
income_colors <- colorNumeric(palette = "viridis", domain = merged_data$Average_Income, na.color = "grey50")
education_colors <- colorFactor(brewer.pal(9, "Set3"), domain = merged_data$Most_Common_Education_Level, na.color = "grey50")

# Create the interactive leaflet map
interactive_map <- leaflet(merged_data) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~race_colors(Least_Common_Race_Ethnicity),
    color = "#444444",
    weight = 1,
    opacity = 1,
    fillOpacity = 0.7,
    popup = ~paste(NAME, "<br>", "Least Common Race/Ethnicity: ", Least_Common_Race_Ethnicity),
    group = "Race/Ethnicity",
    highlightOptions = highlightOptions(
      weight = 3,
      color = "#666",
      fillOpacity = 0.7,
      bringToFront = TRUE
    )
  ) %>%
  addPolygons(
    fillColor = ~income_colors(Average_Income),
    color = "#444444",
    weight = 1,
    opacity = 1,
    fillOpacity = 0.7,
    popup = ~paste(NAME, "<br>", "Average Income: ", dollar_format()(Average_Income)),
    group = "Average Income"
  ) %>%
  addPolygons(
    fillColor = ~education_colors(Most_Common_Education_Level),
    color = "#444444",
    weight = 1,
    opacity = 1,
    fillOpacity = 0.7,
    popup = ~paste(NAME, "<br>", "Most Common Education Level: ", Most_Common_Education_Level),
    group = "Education Level"
  ) %>%
  addLegend("bottomright", pal = race_colors, values = ~Least_Common_Race_Ethnicity, title = "Race/Ethnicity",
            opacity = 0.7, group = "Race/Ethnicity") %>%
  addLegend("bottomright", pal = income_colors, values = ~Average_Income, title = "Average Income",
            opacity = 0.7, group = "Average Income", labFormat = labelFormat(prefix = "$")) %>%
  addLegend("bottomright", pal = education_colors, values = ~Most_Common_Education_Level, title = "Education Level",
            opacity = 0.7, group = "Education Level") %>%
  addLayersControl(
    baseGroups = c("Race/Ethnicity", "Average Income", "Education Level"),
    options = layersControlOptions(collapsed = FALSE)
  )

print(interactive_map)
```


## Statistical Modelling

Model 1 Linear Regression between black, white, hispanic, asian population proportion and Average wage at county level

```{r}
#linear model
modellm<-lm(Average_Wage ~ `Black, non-Hispanic`+`Hispanic`+`Asian, non-Hispanic`+`White, non-Hispanic`, data = demographic_data_aggregated)
summary(modellm)

model_white <- lm(Average_Wage ~ `White, non-Hispanic`, data = demographic_data_aggregated)
summary(model_white)

plot(x = demographic_data_aggregated$`Black, non-Hispanic`, y = demographic_data_aggregated$Average_Wage) 
plot(x = demographic_data_aggregated$`White, non-Hispanic`, y = demographic_data_aggregated$Average_Wage) 
```

Model 2: Linear Regression between Household weight, Education, Income group, Race/Ethnicity, Owner/Renter Status, Household Type

```{r}
clean_data$Education_Level <- as.factor(clean_data$Education_Level)
clean_data$Race_Ethnicity <- as.factor(clean_data$Race_Ethnicity)
clean_data$Income_Groups <- as.factor(clean_data$Income_Groups)
clean_data$Economic_Development_Region <- as.factor(clean_data$Economic_Development_Region)
clean_data$Owner_Renter_Status <- as.factor(clean_data$Owner_Renter_Status)
clean_data$Household_Type <- as.factor(clean_data$Household_Type)

# Linear model
model_linear <- lm(Household_Weight ~ Education_Level + Race_Ethnicity + Income_Groups + Economic_Development_Region + Owner_Renter_Status + Household_Type, data = clean_data)
summary(model_linear)

# Diagnostic plots to check for assumptions
par(mfrow=c(2,2))
model_linear
```

Model 3: Multinomial logistic regression with Race_Ethnicity as the dependent variable
```{r}
library(nnet)
clean_data$Race_Ethnicity <- as.factor(clean_data$Race_Ethnicity)
clean_data$Education_Level <- as.factor(clean_data$Education_Level)
clean_data$Income_Groups <- as.factor(clean_data$Income_Groups)
clean_data$Economic_Development_Region <- as.factor(clean_data$Economic_Development_Region)
clean_data$Owner_Renter_Status <- as.factor(clean_data$Owner_Renter_Status)

# Multinomial logistic regression
multinom_model <- multinom(Race_Ethnicity ~ Education_Level + Income_Groups + Household_Weight + Owner_Renter_Status, data = clean_data)

# Summary of the model
summary(multinom_model)
```
```

